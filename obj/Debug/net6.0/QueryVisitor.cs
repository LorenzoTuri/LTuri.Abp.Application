//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\loren\Desktop\erp-crm\src\LTuri.Abp.Application\Antlr\Query\Query.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LTuri.Abp.Application.Antlr.Query {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="QueryParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface IQueryVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>FilterIAny</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterIAny([NotNull] QueryParser.FilterIAnyContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterIContains</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterIContains([NotNull] QueryParser.FilterIContainsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterContains</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterContains([NotNull] QueryParser.FilterContainsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterStarts</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterStarts([NotNull] QueryParser.FilterStartsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterEnds</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterEnds([NotNull] QueryParser.FilterEndsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterGte</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterGte([NotNull] QueryParser.FilterGteContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterLte</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterLte([NotNull] QueryParser.FilterLteContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterIStarts</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterIStarts([NotNull] QueryParser.FilterIStartsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterILt</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterILt([NotNull] QueryParser.FilterILtContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterIFull</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterIFull([NotNull] QueryParser.FilterIFullContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterIEq</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterIEq([NotNull] QueryParser.FilterIEqContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterILte</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterILte([NotNull] QueryParser.FilterILteContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterIGt</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterIGt([NotNull] QueryParser.FilterIGtContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterEq</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterEq([NotNull] QueryParser.FilterEqContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterIEnds</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterIEnds([NotNull] QueryParser.FilterIEndsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterGt</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterGt([NotNull] QueryParser.FilterGtContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterIGte</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterIGte([NotNull] QueryParser.FilterIGteContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterAny</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterAny([NotNull] QueryParser.FilterAnyContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterLt</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterLt([NotNull] QueryParser.FilterLtContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>FilterFull</c>
	/// labeled alternative in <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilterFull([NotNull] QueryParser.FilterFullContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionNot</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionNot([NotNull] QueryParser.ExpressionNotContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionAnd</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionAnd([NotNull] QueryParser.ExpressionAndContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionOr</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionOr([NotNull] QueryParser.ExpressionOrContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionFilter</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionFilter([NotNull] QueryParser.ExpressionFilterContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionParenthesis</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionParenthesis([NotNull] QueryParser.ExpressionParenthesisContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="QueryParser.query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQuery([NotNull] QueryParser.QueryContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] QueryParser.ExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="QueryParser.filter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilter([NotNull] QueryParser.FilterContext context);
}
} // namespace LTuri.Abp.Application.Antlr.Query
