//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\loren\Desktop\erp-crm\src\LTuri.Abp.Application\Antlr\Query\Query.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LTuri.Abp.Application.Antlr.Query {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class QueryParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, STRING=26, PROPERTY=27, WS=28;
	public const int
		RULE_query = 0, RULE_expression = 1, RULE_filter = 2;
	public static readonly string[] ruleNames = {
		"query", "expression", "filter"
	};

	private static readonly string[] _LiteralNames = {
		null, "'not'", "'('", "')'", "'and'", "'or'", "'eq'", "'ieq'", "'contains'", 
		"'icontains'", "'starts'", "'istarts'", "'ends'", "'iends'", "'gt'", "'igt'", 
		"'lt'", "'ilt'", "'gte'", "'igte'", "'lte'", "'ilte'", "'full'", "'ifull'", 
		"'any'", "'iany'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "STRING", "PROPERTY", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Query.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public QueryParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class QueryContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(QueryParser.Eof, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6; expression(0);
			State = 7; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionNotContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionNotContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionAndContext : ExpressionContext {
		public ExpressionContext expression1;
		public ExpressionContext expression2;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionAndContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionOrContext : ExpressionContext {
		public ExpressionContext expression1;
		public ExpressionContext expression2;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionOrContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionFilterContext : ExpressionContext {
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public ExpressionFilterContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionFilter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionParenthesisContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionParenthesisContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PROPERTY:
				{
				_localctx = new ExpressionFilterContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 10; filter();
				}
				break;
			case T__0:
				{
				_localctx = new ExpressionNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 11; Match(T__0);
				State = 12; expression(4);
				}
				break;
			case T__1:
				{
				_localctx = new ExpressionParenthesisContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 13; Match(T__1);
				State = 14; expression(0);
				State = 15; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 27;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 25;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionAndContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionAndContext)_localctx).expression1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 19;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 20; Match(T__3);
						State = 21; ((ExpressionAndContext)_localctx).expression2 = expression(3);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionOrContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionOrContext)_localctx).expression1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 22;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 23; Match(T__4);
						State = 24; ((ExpressionOrContext)_localctx).expression2 = expression(2);
						}
						break;
					}
					} 
				}
				State = 29;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
	 
		public FilterContext() { }
		public virtual void CopyFrom(FilterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FilterIAnyContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterIAnyContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterIAny(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterIContainsContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterIContainsContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterIContains(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterContainsContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterContainsContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterContains(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterStartsContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterStartsContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterStarts(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterEndsContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterEndsContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterEnds(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterGteContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterGteContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterGte(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterLteContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterLteContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterLte(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterIStartsContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterIStartsContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterIStarts(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterILtContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterILtContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterILt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterIFullContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterIFullContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterIFull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterIEqContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterIEqContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterIEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterILteContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterILteContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterILte(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterIGtContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterIGtContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterIGt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterEqContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterEqContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterIEndsContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterIEndsContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterIEnds(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterGtContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterGtContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterGt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterIGteContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterIGteContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterIGte(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterAnyContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterAnyContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterAny(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterLtContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterLtContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterLt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterFullContext : FilterContext {
		public IToken prop;
		public IToken str;
		public ITerminalNode PROPERTY() { return GetToken(QueryParser.PROPERTY, 0); }
		public ITerminalNode STRING() { return GetToken(QueryParser.STRING, 0); }
		public FilterFullContext(FilterContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterFull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_filter);
		try {
			State = 90;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				_localctx = new FilterEqContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 30; ((FilterEqContext)_localctx).prop = Match(PROPERTY);
				State = 31; Match(T__5);
				State = 32; ((FilterEqContext)_localctx).str = Match(STRING);
				}
				break;

			case 2:
				_localctx = new FilterIEqContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 33; ((FilterIEqContext)_localctx).prop = Match(PROPERTY);
				State = 34; Match(T__6);
				State = 35; ((FilterIEqContext)_localctx).str = Match(STRING);
				}
				break;

			case 3:
				_localctx = new FilterContainsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 36; ((FilterContainsContext)_localctx).prop = Match(PROPERTY);
				State = 37; Match(T__7);
				State = 38; ((FilterContainsContext)_localctx).str = Match(STRING);
				}
				break;

			case 4:
				_localctx = new FilterIContainsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 39; ((FilterIContainsContext)_localctx).prop = Match(PROPERTY);
				State = 40; Match(T__8);
				State = 41; ((FilterIContainsContext)_localctx).str = Match(STRING);
				}
				break;

			case 5:
				_localctx = new FilterStartsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 42; ((FilterStartsContext)_localctx).prop = Match(PROPERTY);
				State = 43; Match(T__9);
				State = 44; ((FilterStartsContext)_localctx).str = Match(STRING);
				}
				break;

			case 6:
				_localctx = new FilterIStartsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 45; ((FilterIStartsContext)_localctx).prop = Match(PROPERTY);
				State = 46; Match(T__10);
				State = 47; ((FilterIStartsContext)_localctx).str = Match(STRING);
				}
				break;

			case 7:
				_localctx = new FilterEndsContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 48; ((FilterEndsContext)_localctx).prop = Match(PROPERTY);
				State = 49; Match(T__11);
				State = 50; ((FilterEndsContext)_localctx).str = Match(STRING);
				}
				break;

			case 8:
				_localctx = new FilterIEndsContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 51; ((FilterIEndsContext)_localctx).prop = Match(PROPERTY);
				State = 52; Match(T__12);
				State = 53; ((FilterIEndsContext)_localctx).str = Match(STRING);
				}
				break;

			case 9:
				_localctx = new FilterGtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 54; ((FilterGtContext)_localctx).prop = Match(PROPERTY);
				State = 55; Match(T__13);
				State = 56; ((FilterGtContext)_localctx).str = Match(STRING);
				}
				break;

			case 10:
				_localctx = new FilterIGtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 57; ((FilterIGtContext)_localctx).prop = Match(PROPERTY);
				State = 58; Match(T__14);
				State = 59; ((FilterIGtContext)_localctx).str = Match(STRING);
				}
				break;

			case 11:
				_localctx = new FilterLtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 60; ((FilterLtContext)_localctx).prop = Match(PROPERTY);
				State = 61; Match(T__15);
				State = 62; ((FilterLtContext)_localctx).str = Match(STRING);
				}
				break;

			case 12:
				_localctx = new FilterILtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 63; ((FilterILtContext)_localctx).prop = Match(PROPERTY);
				State = 64; Match(T__16);
				State = 65; ((FilterILtContext)_localctx).str = Match(STRING);
				}
				break;

			case 13:
				_localctx = new FilterGteContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 66; ((FilterGteContext)_localctx).prop = Match(PROPERTY);
				State = 67; Match(T__17);
				State = 68; ((FilterGteContext)_localctx).str = Match(STRING);
				}
				break;

			case 14:
				_localctx = new FilterIGteContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 69; ((FilterIGteContext)_localctx).prop = Match(PROPERTY);
				State = 70; Match(T__18);
				State = 71; ((FilterIGteContext)_localctx).str = Match(STRING);
				}
				break;

			case 15:
				_localctx = new FilterLteContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 72; ((FilterLteContext)_localctx).prop = Match(PROPERTY);
				State = 73; Match(T__19);
				State = 74; ((FilterLteContext)_localctx).str = Match(STRING);
				}
				break;

			case 16:
				_localctx = new FilterILteContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 75; ((FilterILteContext)_localctx).prop = Match(PROPERTY);
				State = 76; Match(T__20);
				State = 77; ((FilterILteContext)_localctx).str = Match(STRING);
				}
				break;

			case 17:
				_localctx = new FilterFullContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 78; ((FilterFullContext)_localctx).prop = Match(PROPERTY);
				State = 79; Match(T__21);
				State = 80; ((FilterFullContext)_localctx).str = Match(STRING);
				}
				break;

			case 18:
				_localctx = new FilterIFullContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 81; ((FilterIFullContext)_localctx).prop = Match(PROPERTY);
				State = 82; Match(T__22);
				State = 83; ((FilterIFullContext)_localctx).str = Match(STRING);
				}
				break;

			case 19:
				_localctx = new FilterAnyContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 84; ((FilterAnyContext)_localctx).prop = Match(PROPERTY);
				State = 85; Match(T__23);
				State = 86; ((FilterAnyContext)_localctx).str = Match(STRING);
				}
				break;

			case 20:
				_localctx = new FilterIAnyContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 87; ((FilterIAnyContext)_localctx).prop = Match(PROPERTY);
				State = 88; Match(T__24);
				State = 89; ((FilterIAnyContext)_localctx).str = Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);

		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1E_\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x5\x3\x14\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\a\x3\x1C\n\x3\f\x3\xE\x3\x1F\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4]\n\x4\x3\x4\x2"+
		"\x2\x3\x4\x5\x2\x2\x4\x2\x6\x2\x2\x2r\x2\b\x3\x2\x2\x2\x4\x13\x3\x2\x2"+
		"\x2\x6\\\x3\x2\x2\x2\b\t\x5\x4\x3\x2\t\n\a\x2\x2\x3\n\x3\x3\x2\x2\x2\v"+
		"\f\b\x3\x1\x2\f\x14\x5\x6\x4\x2\r\xE\a\x3\x2\x2\xE\x14\x5\x4\x3\x6\xF"+
		"\x10\a\x4\x2\x2\x10\x11\x5\x4\x3\x2\x11\x12\a\x5\x2\x2\x12\x14\x3\x2\x2"+
		"\x2\x13\v\x3\x2\x2\x2\x13\r\x3\x2\x2\x2\x13\xF\x3\x2\x2\x2\x14\x1D\x3"+
		"\x2\x2\x2\x15\x16\f\x4\x2\x2\x16\x17\a\x6\x2\x2\x17\x1C\x5\x4\x3\x5\x18"+
		"\x19\f\x3\x2\x2\x19\x1A\a\a\x2\x2\x1A\x1C\x5\x4\x3\x4\x1B\x15\x3\x2\x2"+
		"\x2\x1B\x18\x3\x2\x2\x2\x1C\x1F\x3\x2\x2\x2\x1D\x1B\x3\x2\x2\x2\x1D\x1E"+
		"\x3\x2\x2\x2\x1E\x5\x3\x2\x2\x2\x1F\x1D\x3\x2\x2\x2 !\a\x1D\x2\x2!\"\a"+
		"\b\x2\x2\"]\a\x1C\x2\x2#$\a\x1D\x2\x2$%\a\t\x2\x2%]\a\x1C\x2\x2&\'\a\x1D"+
		"\x2\x2\'(\a\n\x2\x2(]\a\x1C\x2\x2)*\a\x1D\x2\x2*+\a\v\x2\x2+]\a\x1C\x2"+
		"\x2,-\a\x1D\x2\x2-.\a\f\x2\x2.]\a\x1C\x2\x2/\x30\a\x1D\x2\x2\x30\x31\a"+
		"\r\x2\x2\x31]\a\x1C\x2\x2\x32\x33\a\x1D\x2\x2\x33\x34\a\xE\x2\x2\x34]"+
		"\a\x1C\x2\x2\x35\x36\a\x1D\x2\x2\x36\x37\a\xF\x2\x2\x37]\a\x1C\x2\x2\x38"+
		"\x39\a\x1D\x2\x2\x39:\a\x10\x2\x2:]\a\x1C\x2\x2;<\a\x1D\x2\x2<=\a\x11"+
		"\x2\x2=]\a\x1C\x2\x2>?\a\x1D\x2\x2?@\a\x12\x2\x2@]\a\x1C\x2\x2\x41\x42"+
		"\a\x1D\x2\x2\x42\x43\a\x13\x2\x2\x43]\a\x1C\x2\x2\x44\x45\a\x1D\x2\x2"+
		"\x45\x46\a\x14\x2\x2\x46]\a\x1C\x2\x2GH\a\x1D\x2\x2HI\a\x15\x2\x2I]\a"+
		"\x1C\x2\x2JK\a\x1D\x2\x2KL\a\x16\x2\x2L]\a\x1C\x2\x2MN\a\x1D\x2\x2NO\a"+
		"\x17\x2\x2O]\a\x1C\x2\x2PQ\a\x1D\x2\x2QR\a\x18\x2\x2R]\a\x1C\x2\x2ST\a"+
		"\x1D\x2\x2TU\a\x19\x2\x2U]\a\x1C\x2\x2VW\a\x1D\x2\x2WX\a\x1A\x2\x2X]\a"+
		"\x1C\x2\x2YZ\a\x1D\x2\x2Z[\a\x1B\x2\x2[]\a\x1C\x2\x2\\ \x3\x2\x2\x2\\"+
		"#\x3\x2\x2\x2\\&\x3\x2\x2\x2\\)\x3\x2\x2\x2\\,\x3\x2\x2\x2\\/\x3\x2\x2"+
		"\x2\\\x32\x3\x2\x2\x2\\\x35\x3\x2\x2\x2\\\x38\x3\x2\x2\x2\\;\x3\x2\x2"+
		"\x2\\>\x3\x2\x2\x2\\\x41\x3\x2\x2\x2\\\x44\x3\x2\x2\x2\\G\x3\x2\x2\x2"+
		"\\J\x3\x2\x2\x2\\M\x3\x2\x2\x2\\P\x3\x2\x2\x2\\S\x3\x2\x2\x2\\V\x3\x2"+
		"\x2\x2\\Y\x3\x2\x2\x2]\a\x3\x2\x2\x2\x6\x13\x1B\x1D\\";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LTuri.Abp.Application.Antlr.Query
